"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

export default function SignUpPage() {
  const [formData, setFormData] = useState({
    email: "",
    name: "",
    password: "",
    confirmPassword: "",
    specialty: "",
    licenseNumber: "",
    hospital: ""
  })
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")
  const [success, setSuccess] = useState("")
  const [autoGeneratedPassword, setAutoGeneratedPassword] = useState("")
  
  const router = useRouter()

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const validateForm = () => {
    if (!formData.email || !formData.name) {
      setError("Email y nombre son requeridos")
      return false
    }

    const allowedEmails = ["alfredo@biotronik.ai", "bruno@biotronik.ai", "brunosavoc@gmail.com"]
    if (!allowedEmails.includes(formData.email.toLowerCase())) {
      setError("El registro está restringido solo para personal autorizado de Biotronik")
      return false
    }

    // Para brunosavoc@gmail.com, la contraseña es opcional (se generará automáticamente)
    const isSpecialEmail = formData.email.toLowerCase() === "brunosavoc@gmail.com"
    
    if (!isSpecialEmail && !formData.password) {
      setError("Contraseña es requerida")
      return false
    }

    if (formData.password && formData.password !== formData.confirmPassword) {
      setError("Las contraseñas no coinciden")
      return false
    }

    if (formData.password && formData.password.length < 6) {
      setError("La contraseña debe tener al menos 6 caracteres")
      return false
    }

    return true
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError("")
    setSuccess("")

    if (!validateForm()) {
      setIsLoading(false)
      return
    }

    try {
      const response = await fetch("/api/auth/signup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: formData.email,
          name: formData.name,
          password: formData.password,
          specialty: formData.specialty,
          licenseNumber: formData.licenseNumber,
          hospital: formData.hospital
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        setError(data.error || "Error al crear la cuenta")
      } else {
        if (data.autoGeneratedPassword) {
          setAutoGeneratedPassword(data.autoGeneratedPassword)
          setSuccess(data.message + ` Tu contraseña generada es: ${data.autoGeneratedPassword}`)
        } else {
          setSuccess("¡Cuenta creada exitosamente! Redirigiendo al login...")
          setTimeout(() => {
            router.push("/auth/signin")
          }, 2000)
        }
      }
    } catch {
      setError("Error al conectar con el servidor")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
      <div className="max-w-md w-full space-y-8 p-8">
        <div className="text-center">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-white text-2xl font-bold">B</span>
          </div>
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white">
            Biotronik
          </h2>
          <p className="mt-2 text-gray-600 dark:text-gray-400">
            Crear nueva cuenta médica
          </p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Email corporativo *
              </label>
              <Input
                id="email"
                name="email"
                type="email"
                required
                value={formData.email}
                onChange={handleInputChange}
                className="mt-1"
                placeholder="nombre@biotronik.ai"
              />
            </div>

            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Nombre completo *
              </label>
              <Input
                id="name"
                name="name"
                type="text"
                required
                value={formData.name}
                onChange={handleInputChange}
                className="mt-1"
                placeholder="Dr. Juan Pérez"
              />
            </div>

            <div>
              <label htmlFor="specialty" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Especialidad médica
              </label>
              <Input
                id="specialty"
                name="specialty"
                type="text"
                value={formData.specialty}
                onChange={handleInputChange}
                className="mt-1"
                placeholder="Cardiología, Neurología, etc."
              />
            </div>

            <div>
              <label htmlFor="licenseNumber" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Número de licencia médica
              </label>
              <Input
                id="licenseNumber"
                name="licenseNumber"
                type="text"
                value={formData.licenseNumber}
                onChange={handleInputChange}
                className="mt-1"
                placeholder="Ej: 12345"
              />
            </div>

            <div>
              <label htmlFor="hospital" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Hospital/Institución
              </label>
              <Input
                id="hospital"
                name="hospital"
                type="text"
                value={formData.hospital}
                onChange={handleInputChange}
                className="mt-1"
                placeholder="Biotronik (por defecto)"
              />
            </div>
            
            {formData.email.toLowerCase() !== "brunosavoc@gmail.com" && (
              <>
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Contraseña *
                  </label>
                  <Input
                    id="password"
                    name="password"
                    type="password"
                    required
                    value={formData.password}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="Mínimo 6 caracteres"
                  />
                </div>

                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Confirmar contraseña *
                  </label>
                  <Input
                    id="confirmPassword"
                    name="confirmPassword"
                    type="password"
                    required
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="Repite la contraseña"
                  />
                </div>
              </>
            )}

            {formData.email.toLowerCase() === "brunosavoc@gmail.com" && (
              <>
                <div>
                  <label htmlFor="password" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Contraseña (opcional)
                  </label>
                  <Input
                    id="password"
                    name="password"
                    type="password"
                    value={formData.password}
                    onChange={handleInputChange}
                    className="mt-1"
                    placeholder="Deja vacío para generar automáticamente"
                  />
                  <p className="text-xs text-blue-600 dark:text-blue-400 mt-1">
                    Si no introduces una contraseña, se generará una automáticamente
                  </p>
                </div>

                {formData.password && (
                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                      Confirmar contraseña
                    </label>
                    <Input
                      id="confirmPassword"
                      name="confirmPassword"
                      type="password"
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      className="mt-1"
                      placeholder="Repite la contraseña"
                    />
                  </div>
                )}
              </>
            )}
          </div>

          {error && (
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg p-3">
              <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
            </div>
          )}

          {success && !autoGeneratedPassword && (
            <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg p-3">
              <p className="text-sm text-green-600 dark:text-green-400">{success}</p>
            </div>
          )}

          {autoGeneratedPassword && (
            <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-lg p-4 space-y-3">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                    ¡Contraseña generada automáticamente!
                  </h3>
                </div>
              </div>
              <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
                <p className="text-xs text-gray-600 dark:text-gray-400 mb-2">Tu contraseña generada es:</p>
                <div className="flex items-center justify-between bg-white dark:bg-gray-900 border rounded px-3 py-2">
                  <code className="text-lg font-mono text-gray-900 dark:text-gray-100 break-all">
                    {autoGeneratedPassword}
                  </code>
                  <button
                    type="button"
                    onClick={() => navigator.clipboard.writeText(autoGeneratedPassword)}
                    className="ml-2 text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                    title="Copiar contraseña"
                  >
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                  </button>
                </div>
              </div>
              <div className="text-sm text-yellow-700 dark:text-yellow-300">
                <p className="font-medium">⚠️ IMPORTANTE:</p>
                <ul className="mt-1 list-disc list-inside space-y-1">
                  <li>Copia esta contraseña inmediatamente</li>
                  <li>Guárdala en un lugar seguro</li>
                  <li>No podrás verla nuevamente</li>
                  <li>Úsala para iniciar sesión</li>
                </ul>
                <div className="mt-3">
                  <button
                    type="button"
                    onClick={() => router.push("/auth/signin")}
                    className="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium underline"
                  >
                    Ir al login →
                  </button>
                </div>
              </div>
            </div>
          )}

          <Button
            type="submit"
            disabled={isLoading}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white"
          >
            {isLoading ? "Creando cuenta..." : "Crear Cuenta"}
          </Button>
        </form>

        <div className="text-center space-y-2">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            ¿Ya tienes una cuenta?{" "}
            <Link 
              href="/auth/signin" 
              className="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
            >
              Inicia sesión aquí
            </Link>
          </p>
          <p className="text-xs text-gray-500 dark:text-gray-400">
            Registro restringido solo para personal autorizado de Biotronik
          </p>
        </div>
      </div>
    </div>
  )
}