import { NextRequest, NextResponse } from "next/server"
import { prisma } from "@/lib/prisma"
import bcrypt from "bcryptjs"
import { UserRole, UserStatus } from "@prisma/client"

// Tipo para la respuesta del signup
interface SignupResponse {
  message: string
  user: {
    id: string
    email: string
    name: string
    role: UserRole
    status: UserStatus
    specialty: string | null
    licenseNumber: string | null
    hospital: string | null
    createdAt: Date
  }
  autoGeneratedPassword?: string
}

// Función para generar contraseña segura automáticamente
function generateSecurePassword(): string {
  const length = 12
  const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*"
  let password = ""
  for (let i = 0, n = charset.length; i < length; ++i) {
    password += charset.charAt(Math.floor(Math.random() * n))
  }
  return password
}

// Emails permitidos para el registro
const ALLOWED_EMAILS = [
  "alfredo@biotronik.ai",
  "bruno@biotronik.ai",
  "brunosavoc@gmail.com"
]

export async function POST(request: NextRequest) {
  try {
    const { email, name, password, specialty, licenseNumber, hospital } = await request.json()

    // Generar contraseña automática para brunosavoc@gmail.com si no se proporciona
    let finalPassword = password
    let autoGeneratedPassword = null
    
    if (email?.toLowerCase() === "brunosavoc@gmail.com" && !password) {
      finalPassword = generateSecurePassword()
      autoGeneratedPassword = finalPassword
    }

    // Validaciones básicas (modificadas para brunosavoc@gmail.com)
    if (!email || !name) {
      return NextResponse.json({ 
        error: "Email y nombre son requeridos" 
      }, { status: 400 })
    }
    
    if (!finalPassword) {
      return NextResponse.json({ 
        error: "Contraseña es requerida" 
      }, { status: 400 })
    }

    // Validar email permitido
    if (!ALLOWED_EMAILS.includes(email.toLowerCase())) {
      return NextResponse.json({ 
        error: "Lo sentimos, el registro está restringido solo para personal autorizado de Biotronik. Si crees que esto es un error, contacta al administrador del sistema." 
      }, { status: 403 })
    }

    // Validar longitud de contraseña
    if (finalPassword.length < 6) {
      return NextResponse.json({ 
        error: "La contraseña debe tener al menos 6 caracteres" 
      }, { status: 400 })
    }

    // Verificar si el email ya existe
    const existingUser = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    })

    if (existingUser) {
      return NextResponse.json({ 
        error: "Ya existe una cuenta con este email" 
      }, { status: 400 })
    }

    // Hash de la contraseña
    const hashedPassword = await bcrypt.hash(finalPassword, 12)

    // Determinar el rol basado en el email
    let role: UserRole = UserRole.USER
    if (email.toLowerCase() === "bruno@biotronik.ai") {
      role = UserRole.SUPERADMIN
    } else if (email.toLowerCase() === "alfredo@biotronik.ai") {
      role = UserRole.ADMIN
    } else if (email.toLowerCase() === "brunosavoc@gmail.com") {
      role = UserRole.SUPERADMIN
    }

    // Crear el usuario
    const newUser = await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        name,
        password: hashedPassword,
        role,
        status: UserStatus.ACTIVE,
        specialty: specialty || null,
        licenseNumber: licenseNumber || null,
        hospital: hospital || "Biotronik"
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        status: true,
        specialty: true,
        licenseNumber: true,
        hospital: true,
        createdAt: true
      }
    })

    const response: SignupResponse = { 
      message: "Usuario creado exitosamente",
      user: newUser 
    }

    // Si se generó una contraseña automática, incluirla en la respuesta
    if (autoGeneratedPassword) {
      response.autoGeneratedPassword = autoGeneratedPassword
      response.message = "Usuario creado exitosamente. IMPORTANTE: Guarda la contraseña generada automáticamente."
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error("Error al crear usuario:", error)
    return NextResponse.json({ 
      error: "Error interno del servidor" 
    }, { status: 500 })
  }
}