// Schema para Biotronik - Chat médico con autenticación y administración
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para roles de usuario
enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?   // Null para OAuth
  role          UserRole  @default(USER)
  status        UserStatus @default(ACTIVE)
  specialty     String?   // Especialidad médica
  licenseNumber String?   // Número de licencia médica
  hospital      String?   // Hospital/institución
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  // Relaciones
  conversations Conversation[]
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

// Modelos para NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relación con usuario propietario
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relación con mensajes
  messages Message[]
  
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  role           String       // "user" | "assistant"
  content        String
  images         String[]     // URLs de imágenes (array)
  timestamp      DateTime     @default(now())
  
  // Relación con conversación
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// Nuevo modelo para lista de correos pre-cargados
model EmailRecipient {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("email_recipients")
}
